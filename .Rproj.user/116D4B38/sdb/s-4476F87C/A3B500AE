{
    "contents" : "library(shiny)\nlibrary(leaflet)\nlibrary(RColorBrewer)\nlibrary(scales)\nlibrary(lattice)\nlibrary(dplyr)\n\n# Leaflet bindings are a bit slow; for now we'll just sample to compensate\nset.seed(100)\nzipdata <- allzips[sample.int(nrow(allzips), 10000),]\n# By ordering by centile, we ensure that the (comparatively rare) SuperZIPs\n# will be drawn last and thus be easier to see\nzipdata <- zipdata[order(zipdata$centile),]\n\nshinyServer(function(input, output, session) {\n\n  ## Interactive Map ###########################################\n\n  # Create the map\n  output$map <- renderLeaflet({\n    leaflet() %>%\n      addTiles(\n        urlTemplate = \"//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png\",\n        attribution = 'Maps by <a href=\"http://www.mapbox.com/\">Mapbox</a>'\n      ) %>%\n      setView(lng = -93.85, lat = 37.45, zoom = 4)\n  })\n\n  # A reactive expression that returns the set of zips that are\n  # in bounds right now\n  zipsInBounds <- reactive({\n    if (is.null(input$map_bounds))\n      return(zipdata[FALSE,])\n    bounds <- input$map_bounds\n    latRng <- range(bounds$north, bounds$south)\n    lngRng <- range(bounds$east, bounds$west)\n\n    subset(zipdata,\n      latitude >= latRng[1] & latitude <= latRng[2] &\n        longitude >= lngRng[1] & longitude <= lngRng[2])\n  })\n\n  # Precalculate the breaks we'll need for the two histograms\n  centileBreaks <- hist(plot = FALSE, allzips$centile, breaks = 20)$breaks\n\n  output$histCentile <- renderPlot({\n    # If no zipcodes are in view, don't plot\n    if (nrow(zipsInBounds()) == 0)\n      return(NULL)\n\n    hist(zipsInBounds()$centile,\n      breaks = centileBreaks,\n      main = \"SuperZIP score (visible zips)\",\n      xlab = \"Percentile\",\n      xlim = range(allzips$centile),\n      col = '#00DD00',\n      border = 'white')\n  })\n\n  output$scatterCollegeIncome <- renderPlot({\n    # If no zipcodes are in view, don't plot\n    if (nrow(zipsInBounds()) == 0)\n      return(NULL)\n\n    print(xyplot(income ~ college, data = zipsInBounds(), xlim = range(allzips$college), ylim = range(allzips$income)))\n  })\n\n  # This observer is responsible for maintaining the circles and legend,\n  # according to the variables the user has chosen to map to color and size.\n  observe({\n    colorBy <- input$color\n    sizeBy <- input$size\n\n    if (colorBy == \"superzip\") {\n      # Color and palette are treated specially in the \"superzip\" case, because\n      # the values are categorical instead of continuous.\n      colorData <- ifelse(zipdata$centile >= (100 - input$threshold), \"yes\", \"no\")\n      pal <- colorFactor(\"Spectral\", colorData)\n    } else {\n      colorData <- zipdata[[colorBy]]\n      pal <- colorBin(\"Spectral\", colorData, 7, pretty = FALSE)\n    }\n\n    if (sizeBy == \"superzip\") {\n      # Radius is treated specially in the \"superzip\" case.\n      radius <- ifelse(zipdata$centile >= (100 - input$threshold), 30000, 3000)\n    } else {\n      radius <- zipdata[[sizeBy]] / max(zipdata[[sizeBy]]) * 30000\n    }\n\n    leafletProxy(\"map\", data = zipdata) %>%\n      clearShapes() %>%\n      addCircles(~longitude, ~latitude, radius=radius, layerId=~zipcode,\n        stroke=FALSE, fillOpacity=0.4, fillColor=pal(colorData)) %>%\n      addLegend(\"bottomleft\", pal=pal, values=colorData, title=colorBy,\n        layerId=\"colorLegend\")\n  })\n\n  # Show a popup at the given location\n  showZipcodePopup <- function(zipcode, lat, lng) {\n    selectedZip <- allzips[allzips$zipcode == zipcode,]\n    content <- as.character(tagList(\n      tags$h4(\"Score:\", as.integer(selectedZip$centile)),\n      tags$strong(HTML(sprintf(\"%s, %s %s\",\n        selectedZip$city.x, selectedZip$state.x, selectedZip$zipcode\n      ))), tags$br(),\n      sprintf(\"Median household income: %s\", dollar(selectedZip$income * 1000)), tags$br(),\n      sprintf(\"Percent of adults with BA: %s%%\", as.integer(selectedZip$college)), tags$br(),\n      sprintf(\"Adult population: %s\", selectedZip$adultpop)\n    ))\n    leafletProxy(\"map\") %>% addPopups(lng, lat, content, layerId = zipcode)\n  }\n\n  # When map is clicked, show a popup with city info\n  observe({\n    leafletProxy(\"map\") %>% clearPopups()\n    event <- input$map_shape_click\n    if (is.null(event))\n      return()\n\n    isolate({\n      showZipcodePopup(event$id, event$lat, event$lng)\n    })\n  })\n\n\n  ## Data Explorer ###########################################\n\n  observe({\n    cities <- if (is.null(input$states)) character(0) else {\n      filter(cleantable, State %in% input$states) %>%\n        `$`('City') %>%\n        unique() %>%\n        sort()\n    }\n    stillSelected <- isolate(input$cities[input$cities %in% cities])\n    updateSelectInput(session, \"cities\", choices = cities,\n      selected = stillSelected)\n  })\n\n  observe({\n    zipcodes <- if (is.null(input$states)) character(0) else {\n      cleantable %>%\n        filter(State %in% input$states,\n          is.null(input$cities) | City %in% input$cities) %>%\n        `$`('Zipcode') %>%\n        unique() %>%\n        sort()\n    }\n    stillSelected <- isolate(input$zipcodes[input$zipcodes %in% zipcodes])\n    updateSelectInput(session, \"zipcodes\", choices = zipcodes,\n      selected = stillSelected)\n  })\n\n  observe({\n    if (is.null(input$goto))\n      return()\n    isolate({\n      map <- leafletProxy(\"map\")\n      map %>% clearPopups()\n      dist <- 0.5\n      zip <- input$goto$zip\n      lat <- input$goto$lat\n      lng <- input$goto$lng\n      showZipcodePopup(zip, lat, lng)\n      map %>% fitBounds(lng - dist, lat - dist, lng + dist, lat + dist)\n    })\n  })\n\n  output$ziptable <- DT::renderDataTable({\n    df <- cleantable %>%\n      filter(\n        Score >= input$minScore,\n        Score <= input$maxScore,\n        is.null(input$states) | State %in% input$states,\n        is.null(input$cities) | City %in% input$cities,\n        is.null(input$zipcodes) | Zipcode %in% input$zipcodes\n      ) %>%\n      mutate(Action = paste('<a class=\"go-map\" href=\"\" data-lat=\"', Lat, '\" data-long=\"', Long, '\" data-zip=\"', Zipcode, '\"><i class=\"fa fa-crosshairs\"></i></a>', sep=\"\"))\n    action <- DT::dataTableAjax(session, df)\n\n    DT::datatable(df, options = list(ajax = list(url = action)), escape = FALSE)\n  })\n})\n",
    "created" : 1445680245409.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1866030152",
    "id" : "A3B500AE",
    "lastKnownWriteTime" : 1445679935,
    "path" : "~/shiny-examples/063-superzip-example/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}